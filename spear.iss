; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "Portable Document Spear"
#define MyAppVersion "2.0.44"
#define MyAppExeName "Portable Document Spear.exe"

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{31B00318-6218-4713-BE92-C5ECA15ED678}
AppName={#MyAppName}    
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
DefaultDirName={pf}\{#MyAppName}
DisableProgramGroupPage=yes
LicenseFile=C:\Users\Duke\Desktop\Portable Document Spear\LICENCE.rtf
OutputDir=C:\Users\Duke\Desktop\Portable Document Spear\mysetup
OutputBaseFilename=setup
Compression=lzma
SolidCompression=yes
PrivilegesRequired=admin

#include <idp.iss>

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}";

[Files]
Source: "C:\Users\Duke\Desktop\Portable Document Spear\Portable Document Spear.exe"; DestDir: "{app}"; Flags: ignoreversion
Source: "C:\Users\Duke\Desktop\Portable Document Spear\LICENCE.rtf"; DestDir: "{app}"; Flags: ignoreversion
Source: "C:\Users\Duke\Desktop\Portable Document Spear\wkhtmltopdf.exe"; DestDir: "{app}"; Flags: ignoreversion
Source: "C:\Users\Duke\Desktop\Portable Document Spear\x64\*"; DestDir: "{app}\x64"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "C:\Users\Duke\Desktop\Portable Document Spear\x86\*"; DestDir: "{app}\x86"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "C:\Users\Duke\Desktop\Portable Document Spear\mysetup\dist\*"; DestDir: "{app}\dist"; Flags: ignoreversion recursesubdirs createallsubdirs
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Icons]
Name: "{commonprograms}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"
Name: "{commondesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: desktopicon

[Run]
Filename: "{app}\{#MyAppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"; Flags: nowait postinstall skipifsilent; 

[UninstallRun]
Filename: "{app}\dist\serviceunregister.bat"; Flags: runascurrentuser runhidden

[INI]
Filename: "{userdocs}\{#MyAppName}\config.ini"; Section: "InstallSettings"; Key: "InstallPath"; String: "{app}\{#MyAppExeName}"

[Code]   
function IsDotNetDetected(version: string; service: cardinal): boolean;
// Indicates whether the specified version and service pack of the .NET Framework is installed.
//
// version -- Specify one of these strings for the required .NET Framework version:
//    'v1.1'          .NET Framework 1.1
//    'v2.0'          .NET Framework 2.0
//    'v3.0'          .NET Framework 3.0
//    'v3.5'          .NET Framework 3.5
//    'v4\Client'     .NET Framework 4.0 Client Profile
//    'v4\Full'       .NET Framework 4.0 Full Installation
//    'v4.5'          .NET Framework 4.5
//    'v4.5.1'        .NET Framework 4.5.1
//    'v4.5.2'        .NET Framework 4.5.2
//    'v4.6'          .NET Framework 4.6
//    'v4.6.1'        .NET Framework 4.6.1
//    'v4.6.2'        .NET Framework 4.6.2
//    'v4.7'          .NET Framework 4.7
//
// service -- Specify any non-negative integer for the required service pack level:
//    0               No service packs required
//    1, 2, etc.      Service pack 1, 2, etc. required
var
    key, versionKey: string;
    install, release, serviceCount, versionRelease: cardinal;
    success: boolean;
begin
    versionKey := version;
    versionRelease := 0;

    // .NET 1.1 and 2.0 embed release number in version key
    if version = 'v1.1' then begin
        versionKey := 'v1.1.4322';
    end else if version = 'v2.0' then begin
        versionKey := 'v2.0.50727';
    end

    // .NET 4.5 and newer install as update to .NET 4.0 Full
    else if Pos('v4.', version) = 1 then begin
        versionKey := 'v4\Full';
        case version of
          'v4.5':   versionRelease := 378389;
          'v4.5.1': versionRelease := 378675; // 378758 on Windows 8 and older
          'v4.5.2': versionRelease := 379893;
          'v4.6':   versionRelease := 393295; // 393297 on Windows 8.1 and older
          'v4.6.1': versionRelease := 394254; // 394271 before Win10 November Update
          'v4.6.2': versionRelease := 394802; // 394806 before Win10 Anniversary Update
          'v4.7':   versionRelease := 460798; // 460805 before Win10 Creators Update
        end;
    end;

    // installation key group for all .NET versions
    key := 'SOFTWARE\Microsoft\NET Framework Setup\NDP\' + versionKey;

    // .NET 3.0 uses value InstallSuccess in subkey Setup
    if Pos('v3.0', version) = 1 then begin
        success := RegQueryDWordValue(HKLM, key + '\Setup', 'InstallSuccess', install);
    end else begin
        success := RegQueryDWordValue(HKLM, key, 'Install', install);
    end;

    // .NET 4.0 and newer use value Servicing instead of SP
    if Pos('v4', version) = 1 then begin
        success := success and RegQueryDWordValue(HKLM, key, 'Servicing', serviceCount);
    end else begin
        success := success and RegQueryDWordValue(HKLM, key, 'SP', serviceCount);
    end;

    // .NET 4.5 and newer use additional value Release
    if versionRelease > 0 then begin
        success := success and RegQueryDWordValue(HKLM, key, 'Release', release);
        success := success and (release >= versionRelease);
    end;

    result := success and (install = 1) and (serviceCount >= service);
end;

function Framework46IsNotInstalled(): Boolean;
var
  bSuccess: Boolean;
  regVersion: Cardinal;
begin
  Result := True;

  bSuccess := RegQueryDWordValue(HKLM, 'Software\Microsoft\NET Framework Setup\NDP\v4\Full', 'Release', regVersion);
  if (True = bSuccess) and (regVersion >= 393295) then begin
    Result := False;
  end;
end;



procedure InitializeWizard;
begin
  if Framework46IsNotInstalled() then
  begin
    idpAddFile('https://download.microsoft.com/download/1/4/A/14A6C422-0D3C-4811-A31F-5EF91A83C368/NDP46-KB3045560-Web.exe',  ExpandConstant('{tmp}\NDP46-KB3045560-Web.exe'));
    idpDownloadAfter(wpReady);
  end;
end;


procedure InstallFramework;
var
  StatusText: string;
  ResultCode: Integer;
begin
  StatusText := WizardForm.StatusLabel.Caption;
  
  WizardForm.StatusLabel.Caption := 'Installing .NET Framework 4.6. This might take a few minutesâ€¦';
  WizardForm.ProgressGauge.Style := npbstMarquee;
  try
    if not Exec(ExpandConstant('{tmp}\NDP46-KB3045560-Web.exe'), '/passive /norestart', '', SW_SHOW, ewWaitUntilTerminated, ResultCode) then
        begin
          MsgBox('.NET installation failed with code: ' + IntToStr(ResultCode) + '.', mbError, MB_OK);
        end;
   finally
        WizardForm.StatusLabel.Caption := StatusText;
        WizardForm.ProgressGauge.Style := npbstNormal;
   end;
end;

procedure RegisterServiceExtension;
var
  ResultCode: Integer;
begin
  if not ShellExec('', ExpandConstant('{app}\dist\serviceregister.bat'),
     '', '', SW_HIDE, ewWaitUntilTerminated, ResultCode) then
  //ShellExec(ExpandConstant(''), '', '', SW_SHOW, ewWaitUntilTerminated, ResultCode) then
              begin
              MsgBox('Error ' + IntToStr(ResultCode) + '.', mbError, MB_OK);
              end;
end;


procedure UnregisterServiceExtension;
var
  ResultCode: Integer;
begin
  if not ShellExec('', ExpandConstant('{app}\dist\serviceunregister.bat'),
     '', '', SW_HIDE, ewWaitUntilTerminated, ResultCode) then
  //ShellExec(ExpandConstant(''), '', '', SW_SHOW, ewWaitUntilTerminated, ResultCode) then
              begin
              MsgBox('Error ' + IntToStr(ResultCode) + '.', mbError, MB_OK);
              end;
end;




procedure CurStepChanged(CurStep: TSetupStep);
var
 dotnetpath: String;
begin
dotnetpath := '{#SetupSetting("AppModifyPath")}';
  case CurStep of
    ssInstall  :
      begin
        if Framework46IsNotInstalled then
        begin 
          InstallFramework();
        end;
      end;
      ssDone  :
        begin
           RegisterServiceExtension();            
        end;
  end;
end;

procedure CurUninstallStepChanged(CurUninstallStep: TUninstallStep);
begin
    case CurUninstallStep of
      usUninstall:
      begin
         UnregisterServiceExtension();
      end;
      end;
end;



